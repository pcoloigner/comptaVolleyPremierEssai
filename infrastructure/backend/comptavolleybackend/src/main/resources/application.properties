spring.application.name=comptavolleybackend

#server.port=8099

spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
#spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=update
#update

spring.jpa.hibernate.show-sql=true
#spring.datasource.url=jdbc:postgresql://vps-0bd75ec8.vps.ovh.net:5432/postgres
#spring.datasource.url=jdbc:postgresql://vps-0bd75ec8.vps.ovh.net:5432/plannignsds-db?createDatabaseIfNotExist=true
spring.datasource.url=jdbc:postgresql://vps-0bd75ec8.vps.ovh.net:5432/comptavolley-db
spring.datasource.username=postgres
spring.datasource.password=aivan


# https://www.docker.com/blog/how-to-use-the-postgres-docker-official-image/


# https://www.warp.dev/terminus/docker-postgres-container
#docker run -d -e POSTGRES_PASSWORD=<password> -p <host_port>:<container_port> postgres
#Where:
#
#The -d flag is used to run the container in detached mode (i.e. in the background).
#The -e flag is used to define environment variables for the container.
#The POSTGRES_PASSWORD variable is used to set the PostgreSQL root password.
#The -p flag is used to map the ports of the host and the container.
#The host_port variable is the port on the host machine you want to map.
#The container_port variable is the port on the container you want to expose.
#For example:
#
#$ docker run -d -e POSTGRES_PASSWORD=admin -p 5432:5432 postgres
#This command launches the latest version of PostgreSQL in a Docker container in detached mode that matches the port 5432 of the host to the port 5432 of the container and sets the root username to postgres (default) and the root password to admin.

# https://www.warp.dev/terminus/docker-postgres-container#create-a-database
